/*
 * Web Server
 *
 * A simple web server for managing users
 *
 * API version: 1.0
 * Contact: dmanor@redhat.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"path"
)

func AddUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	var newUser NewUser

	err := json.NewDecoder(r.Body).Decode(&newUser)
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		resp, _ := json.Marshal(ModelError{StatusCode: 405, Message: "Something Wrong With The Data"})
		w.Write(resp)
		return
	}

	db := connectDB()
	defer closeDB(db)

	_, err = db.Exec("INSERT INTO users (name,email) VALUES ($1,$2);", newUser.Name, newUser.Email)
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		resp, _ := json.Marshal(ModelError{StatusCode: 405, Message: fmt.Sprintf("There Is A User With Email: %s In The System", newUser.Email)})
		w.Write(resp)
		return
	}

	var userId string
	db.QueryRow("SELECT userid FROM users WHERE email = $1;", newUser.Email).Scan(&userId)
	resp, err := json.Marshal(User{Id: userId, Name: newUser.Name, Email: newUser.Email})
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		resp, _ := json.Marshal(ModelError{StatusCode: 405, Message: "Something Went Wrong While Retrieving The User's Id"})
		w.Write(resp)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(resp)
}

func DeleteUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	db := connectDB()
	defer closeDB(db)

	userId := path.Base(r.URL.Path)

	var userName, userEmail string
	db.QueryRow("SELECT * FROM users WHERE userid = $1;", userId).Scan(&userId, &userName, &userEmail)

	resp, err := json.Marshal(User{Id: userId, Name: userName, Email: userEmail})
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		resp, _ := json.Marshal(ModelError{StatusCode: 405, Message: fmt.Sprintf("There Is No User In The System With Id: %s", userId)})
		w.Write(resp)
		return
	}

	_, err = db.Exec("DELETE FROM users WHERE userid=$1", userId)

	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		resp, _ := json.Marshal(ModelError{StatusCode: 405, Message: fmt.Sprintf("There Is No User In The System With Id: %s", userId)})
		w.Write(resp)
		return
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write(resp)
	}
}

func FindUsers(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	db := connectDB()
	defer closeDB(db)

	rows, err := db.Query("SELECT * FROM users")
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}
	defer rows.Close()

	var res []User
	for rows.Next() {

		var (
			userId string
			name   string
			email  string
		)

		err := rows.Scan(&userId, &name, &email)
		res = append(res, User{Id: userId, Name: name, Email: email})
		if err != nil {
			w.WriteHeader(http.StatusMethodNotAllowed)
			return
		}
	}

	err = rows.Err()
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	resp, err := json.Marshal(res)
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(resp)
}
